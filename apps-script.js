// =====================================================
// WEBHOOK PARA FORMUL√ÅRIO DE RETIRADA DE TAG
// Associa√ß√£o Vivendas do Cachamorra
// Integrado com planilha espec√≠fica do condom√≠nio
// =====================================================

function doGet() {
  const output = HtmlService.createHtmlOutput(`
    <div style="font-family: Arial, sans-serif; padding: 20px; text-align: center;">
      <h2>üè† Webhook TAG - Sistema Ativo</h2>
      <p>‚úÖ Apps Script funcionando corretamente!</p>
      <p>üìÖ ${new Date().toLocaleString('pt-BR')}</p>
      <p>üîß Conectado √† planilha do condom√≠nio</p>
      <p><strong>Status:</strong> Pronto para receber solicita√ß√µes</p>
    </div>
  `);
  
  output.setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  return output;
}

function doPost(e) {
  try {
    console.log('üì® Nova solicita√ß√£o de TAG recebida:', new Date().toISOString());
    
    // Verificar se h√° dados
    if (!e.postData || !e.postData.contents) {
      throw new Error('Nenhum dado recebido na requisi√ß√£o');
    }
    
    console.log('üìÑ Dados recebidos:', e.postData.contents);
    
    // Parse dos dados do formul√°rio
    const data = JSON.parse(e.postData.contents);
    console.log('‚úÖ Dados parseados:', JSON.stringify(data, null, 2));
    
    // ID da planilha espec√≠fica do condom√≠nio
    const PLANILHA_ID = '12RrI7hj6crhZhKyxAdK8Y9c5yraZEn6I5oZk-JqMBIg';
    
    console.log('üìä Abrindo planilha espec√≠fica...');
    
    // Abrir a planilha espec√≠fica
    const spreadsheet = SpreadsheetApp.openById(PLANILHA_ID);
    
    // Tentar pegar a aba "Solicita√ß√µes TAG" ou usar a primeira aba
    let sheet;
    try {
      sheet = spreadsheet.getSheetByName('Solicita√ß√µes TAG');
      if (!sheet) {
        sheet = spreadsheet.getActiveSheet();
        // Renomear a aba se for a primeira vez
        if (sheet.getName() === 'Planilha1' || sheet.getName() === 'Sheet1') {
          sheet.setName('Solicita√ß√µes TAG');
        }
      }
    } catch (error) {
      sheet = spreadsheet.getActiveSheet();
    }
    
    console.log('üìã Usando aba:', sheet.getName());
    
    // Verificar se precisa adicionar cabe√ßalhos
    const lastRow = sheet.getLastRow();
    if (lastRow === 0 || sheet.getRange(1, 1).getValue() === '') {
      console.log('üìù Adicionando cabe√ßalhos...');
      const headers = [
        'Data/Hora',
        '√â Contribuinte',
        'J√° Cadastrado',
        'Nome',
        'Telefone',
        'Nome R√°pido',
        'Telefone R√°pido',
        'Status',
        'Tipo Solicita√ß√£o',
        'Timestamp',
        'IP/UserAgent'
      ];
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      
      // Formata√ß√£o do cabe√ßalho
      const headerRange = sheet.getRange(1, 1, 1, headers.length);
      headerRange.setBackground('#28a745');
      headerRange.setFontColor('#ffffff');
      headerRange.setFontWeight('bold');
    }
    
    // Preparar dados para inserir
    const agora = new Date();
    const linha = [
      Utilities.formatDate(agora, 'GMT-3', 'dd/MM/yyyy HH:mm:ss'),
      data.contribuinte || '',
      data.cadastrado || '',
      data.nome || '',
      data.telefone || '',
      data.nomeRapido || '',
      data.telefoneRapido || '',
      'Aguardando Retirada',
      data.tipoSolicitacao || 'Solicita√ß√£o TAG',
      data.timestamp || '',
      `${e.postData.remoteAddress || 'N/A'} | ${data.userAgent || 'N/A'}`
    ];
    
    console.log('üìù Inserindo dados na linha:', sheet.getLastRow() + 1);
    
    // Inserir dados na pr√≥xima linha dispon√≠vel
    const proximaLinha = sheet.getLastRow() + 1;
    sheet.getRange(proximaLinha, 1, 1, linha.length).setValues([linha]);
    
    // Formata√ß√£o condicional da nova linha
    const novaLinhaRange = sheet.getRange(proximaLinha, 1, 1, linha.length);
    if (proximaLinha % 2 === 0) {
      novaLinhaRange.setBackground('#f8f9fa');
    }
    
    console.log('‚úÖ Dados inseridos com sucesso na planilha');
    
    // Resposta de sucesso
    const resposta = {
      success: true,
      message: 'Solicita√ß√£o de TAG registrada com sucesso!',
      numeroSolicitacao: `TAG-${agora.getTime()}`,
      linha: proximaLinha,
      planilha: spreadsheet.getUrl(),
      timestamp: agora.toISOString(),
      dadosRecebidos: {
        nome: data.nome,
        telefone: data.telefone,
        contribuinte: data.contribuinte,
        cadastrado: data.cadastrado
      }
    };
    
    console.log('üì§ Enviando resposta de sucesso');
    
    return ContentService
      .createTextOutput(JSON.stringify(resposta))
      .setMimeType(ContentService.MimeType.JSON);
    
  } catch (error) {
    console.error('‚ùå Erro ao processar solicita√ß√£o:', error);
    console.error('‚ùå Stack trace:', error.stack);
    
    // Resposta de erro
    const respostaErro = {
      success: false,
      error: 'Erro interno do servidor',
      detalhes: error.toString(),
      timestamp: new Date().toISOString()
    };
    
    return ContentService
      .createTextOutput(JSON.stringify(respostaErro))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

// Fun√ß√£o para testar o sistema
function testarSistema() {
  console.log('üß™ Iniciando teste do sistema...');
  
  const dadosTeste = {
    postData: {
      contents: JSON.stringify({
        contribuinte: 'sim',
        cadastrado: 'sim',
        nome: 'Jo√£o Silva Teste',
        telefone: '(11) 99999-9999',
        tipoSolicitacao: 'Teste do Sistema',
        timestamp: new Date().toISOString()
      }),
      remoteAddress: '192.168.1.1'
    }
  };
  
  const resultado = doPost(dadosTeste);
  const conteudo = resultado.getContent();
  
  console.log('üìä Resultado do teste:');
  console.log(conteudo);
  
  try {
    const json = JSON.parse(conteudo);
    if (json.success) {
      console.log('‚úÖ TESTE PASSOU! Dados inseridos na linha:', json.linha);
      console.log('üìã Planilha:', json.planilha);
    } else {
      console.log('‚ùå TESTE FALHOU:', json.error);
    }
  } catch (e) {
    console.log('‚ùå Erro ao fazer parse da resposta:', e);
  }
  
  return conteudo;
}

// Fun√ß√£o para limpar logs
function limparLogs() {
  console.clear();
  console.log('üßπ Logs limpos - Sistema pronto para produ√ß√£o!');
}

// Fun√ß√£o para criar notifica√ß√£o por email (opcional)
function notificarNovaTag(dados) {
  try {
    const assunto = `Nova Solicita√ß√£o de TAG - ${dados.nome}`;
    const corpo = `
      Nova solicita√ß√£o de TAG recebida:
      
      üìã Dados do solicitante:
      ‚Ä¢ Nome: ${dados.nome}
      ‚Ä¢ Telefone: ${dados.telefone}
      ‚Ä¢ √â contribuinte: ${dados.contribuinte}
      ‚Ä¢ Data/Hora: ${new Date().toLocaleString('pt-BR')}
      
      üîó Acesse a planilha: https://docs.google.com/spreadsheets/d/12RrI7hj6crhZhKyxAdK8Y9c5yraZEn6I5oZk-JqMBIg/edit
      
      --
      Sistema Autom√°tico - Vivendas do Cachamorra
    `;
    
    // Descomente a linha abaixo e substitua pelo email da administra√ß√£o
    // GmailApp.sendEmail('admin@condominio.com', assunto, corpo);
    
    console.log('üìß Notifica√ß√£o preparada (desabilitada)');
    
  } catch (error) {
    console.log('‚ö†Ô∏è Erro ao enviar notifica√ß√£o:', error);
  }
}